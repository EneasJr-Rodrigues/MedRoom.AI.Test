version: 2.1

orbs:
  python: circleci/python@0.2.1

  run_tests:
    description: setup project and run tests
    steps:
      - setup_remote_docker
      - run:
          name: Check pip config
          command: |
            pip config list -v
            mkdir /home/circleci/.pip
            pip config list -v
            pip install --upgrade pip
            pip install dist/MedRoom.AI.Test-0.0.1-py3-none-any.whl
      - run:
          name: Building Docker Container
          command: |
            export ENV=test
            export JUPYTER_PORT=8086
            export SERVICE=med_room
            docker-compose --env-file config/local/.env build
      - run:
          name: Building Sphinx Documentation
          command: |
            export SERVICE=med_room
            docker-compose --env-file config/local/.env up -d
      - run:
          name: Tests
          command: |
            set -e
            export ENV=test
            export JUPYTER_PORT=8086
            mkdir coverage
            touch coverage/coverage_docker.xml
            # docker-compose --env-file config/test/.env run --rm med_room tests --cov-report term:skip-covered --junitxml=junit.xml --cov=dextra tests
            dna start && sleep 10 && docker exec -t med_room-container coverage run --branch --source=med_room -m pytest tests/ --junitxml=junit.xml && \
            export CONTAINER_NAME=$(docker ps -a --format '{{.Names}}' | grep med_room) && \
            # docker start $CONTAINER_NAME && \
            docker ps -a && \
            echo "Generating Coverage" && \
            docker exec -ti $CONTAINER_NAME coverage xml -i && \
            echo "Fetching Tests Artefacts from container" && \
            docker exec -ti $CONTAINER_NAME cat junit.xml >> coverage/junit.xml && \
            docker exec -ti $CONTAINER_NAME cat coverage.xml >> coverage/coverage_docker.xml
            ls coverage -la
            cat coverage/coverage_docker.xml
            awk -v LIB=$(pwd) '/<source>/ { print "              <source>" LIB "</source>"; next}1' coverage/coverage_docker.xml >> coverage/coverage.xml
            rm coverage/coverage_docker.xml
            cp coverage/coverage.xml ./coverage.xml
jobs:
  tests:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run_tests
workflows:
  checkout: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - tests
      